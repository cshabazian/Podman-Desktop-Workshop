---
- name: Install novnc and optionally podman desktop
  hosts: node1
  become: yes
  gather_facts: yes
  collections:
    - community.crypto.x509_certificate
    - ansible.posix
    - community.general
  vars:
    INSTANCE_TARGETHOST_FILE: /root/RHEL9-Workshop/config/gpte-pub-fqdn-node1.txt
    INSTANCE_PASSWORD_FILE: /root/RHEL9-Workshop/config/gpte-studentpw.txt
    NOVNC_SYSTEMD_SERVICE: ./files/novnc.service #############  CHANGE ME  #############
    VNCCONFIG: ./files/vncconfig                 #############  CHANGE ME  #############
    PODMAN_DESKTOP: true
    VNC_USERNAME: student # cloud-user for local build, student for build in Azure


  tasks:

  - name: Make sure the VNC_USERNAME user exists
    ansible.builtin.user:
      name: "{{ VNC_USERNAME }}"
      groups: wheel
      append: yes

  - name: Ensure VNC_USERNAME has NOPASSWD sudo
    ansible.builtin.lineinfile:
      path: "/etc/sudoers.d/{{ VNC_USERNAME }}"
      line: "student ALL=(ALL)       NOPASSWD: ALL"
      create: yes
      owner: root
      group: root

  - name: Make the necessary directory for build files
    ansible.builtin.file:
      path: /root/RHEL9-Workshop/config
      state: directory

  - name: Copy targethost
    ansible.builtin.copy:
      src: /root/RHEL9-Workshop/config/gpte-pub-fqdn-node1.txt
      dest: /root/RHEL9-Workshop/config/gpte-pub-fqdn-node1.txt

  - name: Copy password file
    ansible.builtin.copy:
      src: /root/RHEL9-Workshop/config/gpte-studentpw.txt
      dest: /root/RHEL9-Workshop/config/gpte-studentpw.txt

  - name: Get INSTANCE_PASSWORD
    ansible.builtin.command: cat {{ INSTANCE_PASSWORD_FILE }}
    register: INSTANCE_PASSWORD
    # Referenced as INSTANCE_PASSWORD.stdout

  - name: Get TARGETHOST
    ansible.builtin.command: cat {{ INSTANCE_TARGETHOST_FILE }}
    register: TARGETHOST
    # Referenced as TARGETHOST.stdout

  - name: Replace a localhost entry with our own
    ansible.builtin.lineinfile:
      path: /etc/hosts
      regexp: '^127\.0\.0\.1'
      line: "127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4 {{ ansible_hostname }} {{ TARGETHOST.stdout }}"
      owner: root
      group: root
      mode: 0644

  - name: Install epel
    ansible.builtin.yum:
      name: https://dl.fedoraproject.org/pub/epel/epel-release-latest-{{ ansible_distribution_major_version }}.noarch.rpm
      state: present
      disable_gpg_check: true

  - name: Install novnc
    ansible.builtin.yum:
      name: "{{ novnc_packages }}"
    vars:
      novnc_packages:
      - novnc
      - python-websockify
      - numpy
      - "@Server with GUI"
      - tigervnc-server

  - name: Create a private key for the certificate signing request
    community.crypto.openssl_privatekey:
      path: /root/self.key

  - name: Generate a certificate signing request
    community.crypto.openssl_csr:
      path: /root/self.csr
      privatekey_path: /root/self.key
      common_name: "{{ ansible_hostname }}"
      email_address: "student@{{ ansible_domain }}"
      country_name: "US"
      state_or_province_name: "North Carolina"
      locality_name: "Raleigh"
      organization_name: "Red Hat"
      organizational_unit_name: "Workshop"

  - name: Generate a cert in /root
    openssl_certificate:
      path: /root/self.crt
      privatekey_path: /root/self.key
      csr_path: /root/self.csr
      provider: selfsigned

  - name: Create novnc systemd service
    ansible.builtin.copy:
      src: "{{ NOVNC_SYSTEMD_SERVICE }}"
      dest: /usr/lib/systemd/system/novnc.service
      owner: root
      group: root
      mode: 0644
      seuser: system_u
      serole: object_r
      setype: vmtools_unit_file_t
      selevel: s0

  - name: Start and enable novnc.service
    ansible.builtin.systemd:
      daemon_reload: true
      state: started
      enabled: true
      name: novnc

  - name: Create vnc systemd service
    ansible.builtin.command: cp /usr/lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:1.service

  - name: Add the user to vncusers
    ansible.builtin.lineinfile:
      path: /etc/tigervnc/vncserver.users
      line: ":1={{ VNC_USERNAME }}"
      create: yes

  - name: Make {{ VNC_USERNAME }}/.vnc
    ansible.builtin.file:
      path: "/home/{{ VNC_USERNAME }}/.vnc"
      state: directory
    become_user: "{{ VNC_USERNAME }}"

  - name: Set vnc password
    become_user: "{{ VNC_USERNAME }}"
    ansible.builtin.shell: printf "{{ INSTANCE_PASSWORD.stdout }}\n{{ INSTANCE_PASSWORD.stdout }}\n\n" | vncpasswd

  - name: Create .vnc/config
    ansible.builtin.copy:
      src: "{{ VNCCONFIG }}"
      dest: "/home/{{ VNC_USERNAME }}/.vnc/config"
      owner: "{{ VNC_USERNAME }}"
      group: "{{ VNC_USERNAME }}"
      mode: 0644

  - name: Set gnome session for vnc
    ansible.builtin.lineinfile:
      path: "/home/{{ VNC_USERNAME }}/.session"
      line: "gnome-session"
      create: yes
      owner: "{{ VNC_USERNAME }}"
      group: "{{ VNC_USERNAME }}"

  - name: Create firewall rules for novnc
    ansible.posix.firewalld:
      service: "{{ item }}"
      state: enabled
      permanent: true
      immediate: true
    with_items:
      - https
      - vnc-server

  - name: Start and enable vnc.service
    ansible.builtin.systemd:
      state: started
      enabled: true
      name: vncserver@:1.service

  - name: Write novnc URL to a file
    copy:
      dest: /root/Podman-Desktop-Workshop/novnc_url
      content: |
        https://{{ TARGETHOST.stdout }}/vnc.html?host={{ TARGETHOST.stdout }}&port=443
    delegate_to: localhost

  - name: Copy novnc URL
    ansible.builtin.copy:
      src: /root/Podman-Desktop-Workshop/novnc_url
      dest: /home/{{ VNC_USERNAME }}/novnc_url
      owner: "{{ VNC_USERNAME }}"
      group: "{{ VNC_USERNAME }}"

  - name: Install the Podman Desktop flatpak if "PODMAN_DESKTOP == true"
    community.general.flatpak:
      name: https://dl.flathub.org/repo/appstream/io.podman_desktop.PodmanDesktop.flatpakref
      state: present
